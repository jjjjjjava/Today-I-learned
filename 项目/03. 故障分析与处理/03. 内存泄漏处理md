# 内存泄漏分析报告

[toc]

---

## 01. 功能概述

- **[优先级]**
  - [ ] ⚠️ 阻断 (Blocker)：系统崩溃、核心功能完全不可用
  - [ ] 🔴 严重 (Critical)：核心功能受损，无可用替代方案
  - [ ] 🟠 高 (High)：主要功能受影响，但有临时解决方案
  - [ ] 🟡 中 (Medium)：次要功能问题，影响用户体验
  - [ ] 🟢 低 (Low)：界面问题或轻微异常，不影响功能
- **问题简要描述**
  - **Bug ID**：`BUG-20240709-001`
  - **影响版本**：v
  - **提交人**：@panruiqi
  - **状态**：
    - [ ] ⌛ 修复中 /
    - [ ] ✅ 已解决 /
    - [ ] ❌ 无法复现
- **问题现象**
  - 
- **环境特征**
  - 设备型号/系统版本/网络环境/特殊配置等

---

## 02. 问题分析

### 2.1 日志分析

- 关键日志片段：
  ```
  
  ```
- 相关异常堆栈/内存快照/警告信息：

### 2.2 根本原因推理

- 结合日志、现象、历史修改，推理可能的根因：

---

## 03. 代码分析

### 3.1 关联代码路径

- 涉及的主要类/方法/文件：
  ```
  
  ```

### 3.2 可疑修改点

- 近期相关变更、历史遗留问题、第三方库影响等：

---

## 04. 复现步骤

1. 
2. 
3. 
4. 

---

## 05. 数据采集

- [ ] dumpsys meminfo/procstats
- [ ] LeakCanary/Profiler/MAT截图
- [ ] 关键日志/堆栈
- [ ] 相关配置/环境信息

---

## 06. 泄漏定位过程

### 6.1 工具/方法

- LeakCanary、MAT、Android Profiler、内存快照分析等

### 6.2 关键发现

- 发现的泄漏对象、引用链、GC Root等

---

## 07. 泄漏点与修复

### 7.1 代码位置

- 具体类/方法/行号/调用链

### 7.2 修复方法

- 代码修正/资源释放/生命周期管理/第三方库升级等

---

## 08. 验证与回归

- 修复后验证方式（自动化/手动/专项测试）
- 回归结果（是否彻底解决，是否有副作用）

---

## 09. 经验总结与预防建议

### 9.1 技术原理

- 相关内存管理机制、GC原理、Android生命周期等

### 9.2 预防措施

- 代码规范、工具接入、review要点、专项测试建议

### 9.3 卸载规范

- 资源释放、解绑监听、弱引用使用等

### 9.4 调试技巧

- 常用分析命令、工具使用心得、排查思路

---